// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for CrqType.
const (
	CrqTypeAutocrq CrqType = "autocrq"
	CrqTypeCrq     CrqType = "crq"
)

// Defines values for ErrorCode.
const (
	ErrorCodeInternal ErrorCode = "internal"
	ErrorCodeInvalid  ErrorCode = "invalid"
	ErrorCodeNotFound ErrorCode = "not_found"
)

// Defines values for CreateCRQJSONBodyType.
const (
	CreateCRQJSONBodyTypeAutocrq CreateCRQJSONBodyType = "autocrq"
	CreateCRQJSONBodyTypeCrq     CreateCRQJSONBodyType = "crq"
)

// Crq defines model for crq.
type Crq struct {
	// Links Set of links
	Links     SelfLink  `json:"_links"`
	CreatedAt Timestamp `json:"createdAt"`

	// Description The long-form description of change
	Description string `json:"description"`
	Id          Id     `json:"id"`

	// IsAutoClose This flag indicates that change request should be closed automatically
	IsAutoClose bool `json:"isAutoClose"`

	// Summary The short-form description of change
	Summary string `json:"summary"`

	// Type The type of change
	Type      CrqType    `json:"type"`
	UpdatedAt *Timestamp `json:"updatedAt,omitempty"`
}

// CrqType The type of change
type CrqType string

// Error defines model for error.
type Error struct {
	// Code An API error type
	Code ErrorCode `json:"code"`

	// Message Human readable message
	Message string `json:"message"`
}

// ErrorCode An API error type
type ErrorCode string

// Id defines model for id.
type Id = string

// Incident defines model for incident.
type Incident struct {
	// Links Set of links
	Links     SelfLink  `json:"_links"`
	CreatedAt Timestamp `json:"createdAt"`

	// Description The long-form description of change
	Description string `json:"description"`
	Id          Id     `json:"id"`

	// Summary The short-form description of change
	Summary   string     `json:"summary"`
	UpdatedAt *Timestamp `json:"updatedAt,omitempty"`
}

// LimitType defines model for limit_type.
type LimitType = int

// Link The link
type Link = string

// Links defines model for links.
type Links struct {
	// Base The link
	Base Link `json:"base"`

	// Next The link
	Next *Link `json:"next,omitempty"`

	// Prev The link
	Prev *Link `json:"prev,omitempty"`

	// Self The link
	Self Link `json:"self"`
}

// List defines model for list.
type List struct {
	Links Links     `json:"_links"`
	Limit LimitType `json:"limit"`
	Start StartType `json:"start"`
	Total int       `json:"total"`
}

// SelfLink Set of links
type SelfLink struct {
	// Self The link
	Self Link `json:"self"`
}

// StartType defines model for start_type.
type StartType = int

// Timestamp defines model for timestamp.
type Timestamp = int64

// CrqId defines model for crq_id.
type CrqId = Id

// IncidentId defines model for incident_id.
type IncidentId = Id

// Limit defines model for limit.
type Limit = LimitType

// Start defines model for start.
type Start = StartType

// GetCrq defines model for get_crq.
type GetCrq = Crq

// GetIncident defines model for get_incident.
type GetIncident = Incident

// Internal defines model for internal.
type Internal = Error

// Invalid defines model for invalid.
type Invalid = Error

// ListCrq defines model for list_crq.
type ListCrq struct {
	Links Links     `json:"_links"`
	Data  []Crq     `json:"data"`
	Limit LimitType `json:"limit"`
	Start StartType `json:"start"`
	Total int       `json:"total"`
}

// ListIncidents defines model for list_incidents.
type ListIncidents struct {
	Links Links      `json:"_links"`
	Data  []Incident `json:"data"`
	Limit LimitType  `json:"limit"`
	Start StartType  `json:"start"`
	Total int        `json:"total"`
}

// NotFound defines model for not_found.
type NotFound = Error

type CreateCrqType = CrqType

// CreateCrq defines model for create_crq.
type CreateCrq struct {
	// Description The long-form description of change
	Description string `json:"description"`

	// IsAutoClose This flag indicates that change request should be closed  automatically
	IsAutoClose *bool `json:"isAutoClose,omitempty"`

	// Summary The short-form description of change
	Summary string `json:"summary"`

	// Type The type of change
	Type *CreateCrqType `json:"type,omitempty"`
}

// CreateIncident defines model for create_incident.
type CreateIncident struct {
	// Description The long-form description of change
	Description string `json:"description"`

	// Summary The short-form description of change
	Summary string `json:"summary"`
}

// ListCRQParams defines parameters for ListCRQ.
type ListCRQParams struct {
	// Start The count of records that should be skipped
	Start *Start `form:"start,omitempty" json:"start,omitempty"`

	// Limit The maximum records that should be returned
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateCRQJSONBody defines parameters for CreateCRQ.
type CreateCRQJSONBody struct {
	// Description The long-form description of change
	Description string `json:"description"`

	// IsAutoClose This flag indicates that change request should be closed  automatically
	IsAutoClose *bool `json:"isAutoClose,omitempty"`

	// Summary The short-form description of change
	Summary string `json:"summary"`

	// Type The type of change
	Type *CreateCRQJSONBodyType `json:"type,omitempty"`
}

// CreateCRQJSONBodyType defines parameters for CreateCRQ.
type CreateCRQJSONBodyType string

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	// Start The count of records that should be skipped
	Start *Start `form:"start,omitempty" json:"start,omitempty"`

	// Limit The maximum records that should be returned
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateIncidentJSONBody defines parameters for CreateIncident.
type CreateIncidentJSONBody struct {
	// Description The long-form description of change
	Description string `json:"description"`

	// Summary The short-form description of change
	Summary string `json:"summary"`
}

// CreateCRQJSONRequestBody defines body for CreateCRQ for application/json ContentType.
type CreateCRQJSONRequestBody CreateCRQJSONBody

// CreateIncidentJSONRequestBody defines body for CreateIncident for application/json ContentType.
type CreateIncidentJSONRequestBody CreateIncidentJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListCRQ request
	ListCRQ(ctx context.Context, params *ListCRQParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCRQ request with any body
	CreateCRQWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCRQ(ctx context.Context, body CreateCRQJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCRQById request
	GetCRQById(ctx context.Context, crqId CrqId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncident request with any body
	CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncident(ctx context.Context, body CreateIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentById request
	GetIncidentById(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListCRQ(ctx context.Context, params *ListCRQParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCRQRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCRQWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCRQRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCRQ(ctx context.Context, body CreateCRQJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCRQRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCRQById(ctx context.Context, crqId CrqId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCRQByIdRequest(c.Server, crqId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncident(ctx context.Context, body CreateIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentById(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentByIdRequest(c.Server, incidentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListCRQRequest generates requests for ListCRQ
func NewListCRQRequest(server string, params *ListCRQParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/crq")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCRQRequest calls the generic CreateCRQ builder with application/json body
func NewCreateCRQRequest(server string, body CreateCRQJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCRQRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCRQRequestWithBody generates requests for CreateCRQ with any type of body
func NewCreateCRQRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/crq")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCRQByIdRequest generates requests for GetCRQById
func NewGetCRQByIdRequest(server string, crqId CrqId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "crqId", runtime.ParamLocationPath, crqId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/crq/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/im")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentRequest calls the generic CreateIncident builder with application/json body
func NewCreateIncidentRequest(server string, body CreateIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIncidentRequestWithBody generates requests for CreateIncident with any type of body
func NewCreateIncidentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/im")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentByIdRequest generates requests for GetIncidentById
func NewGetIncidentByIdRequest(server string, incidentId IncidentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/im/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListCRQ request
	ListCRQWithResponse(ctx context.Context, params *ListCRQParams, reqEditors ...RequestEditorFn) (*ListCRQResponse, error)

	// CreateCRQ request with any body
	CreateCRQWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCRQResponse, error)

	CreateCRQWithResponse(ctx context.Context, body CreateCRQJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCRQResponse, error)

	// GetCRQById request
	GetCRQByIdWithResponse(ctx context.Context, crqId CrqId, reqEditors ...RequestEditorFn) (*GetCRQByIdResponse, error)

	// ListIncidents request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// CreateIncident request with any body
	CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	CreateIncidentWithResponse(ctx context.Context, body CreateIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error)

	// GetIncidentById request
	GetIncidentByIdWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*GetIncidentByIdResponse, error)
}

type ListCRQResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links Links     `json:"_links"`
		Data  []Crq     `json:"data"`
		Limit LimitType `json:"limit"`
		Start StartType `json:"start"`
		Total int       `json:"total"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListCRQResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCRQResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCRQResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateCRQResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCRQResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCRQByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Crq
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCRQByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCRQByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links Links      `json:"_links"`
		Data  []Incident `json:"data"`
		Limit LimitType  `json:"limit"`
		Start StartType  `json:"start"`
		Total int        `json:"total"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetIncidentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListCRQWithResponse request returning *ListCRQResponse
func (c *ClientWithResponses) ListCRQWithResponse(ctx context.Context, params *ListCRQParams, reqEditors ...RequestEditorFn) (*ListCRQResponse, error) {
	rsp, err := c.ListCRQ(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCRQResponse(rsp)
}

// CreateCRQWithBodyWithResponse request with arbitrary body returning *CreateCRQResponse
func (c *ClientWithResponses) CreateCRQWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCRQResponse, error) {
	rsp, err := c.CreateCRQWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCRQResponse(rsp)
}

func (c *ClientWithResponses) CreateCRQWithResponse(ctx context.Context, body CreateCRQJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCRQResponse, error) {
	rsp, err := c.CreateCRQ(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCRQResponse(rsp)
}

// GetCRQByIdWithResponse request returning *GetCRQByIdResponse
func (c *ClientWithResponses) GetCRQByIdWithResponse(ctx context.Context, crqId CrqId, reqEditors ...RequestEditorFn) (*GetCRQByIdResponse, error) {
	rsp, err := c.GetCRQById(ctx, crqId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCRQByIdResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// CreateIncidentWithBodyWithResponse request with arbitrary body returning *CreateIncidentResponse
func (c *ClientWithResponses) CreateIncidentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncidentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentWithResponse(ctx context.Context, body CreateIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentResponse, error) {
	rsp, err := c.CreateIncident(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentResponse(rsp)
}

// GetIncidentByIdWithResponse request returning *GetIncidentByIdResponse
func (c *ClientWithResponses) GetIncidentByIdWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*GetIncidentByIdResponse, error) {
	rsp, err := c.GetIncidentById(ctx, incidentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentByIdResponse(rsp)
}

// ParseListCRQResponse parses an HTTP response from a ListCRQWithResponse call
func ParseListCRQResponse(rsp *http.Response) (*ListCRQResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCRQResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links Links     `json:"_links"`
			Data  []Crq     `json:"data"`
			Limit LimitType `json:"limit"`
			Start StartType `json:"start"`
			Total int       `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateCRQResponse parses an HTTP response from a CreateCRQWithResponse call
func ParseCreateCRQResponse(rsp *http.Response) (*CreateCRQResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCRQResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCRQByIdResponse parses an HTTP response from a GetCRQByIdWithResponse call
func ParseGetCRQByIdResponse(rsp *http.Response) (*GetCRQByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCRQByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Crq
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links Links      `json:"_links"`
			Data  []Incident `json:"data"`
			Limit LimitType  `json:"limit"`
			Start StartType  `json:"start"`
			Total int        `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateIncidentResponse parses an HTTP response from a CreateIncidentWithResponse call
func ParseCreateIncidentResponse(rsp *http.Response) (*CreateIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIncidentByIdResponse parses an HTTP response from a GetIncidentByIdWithResponse call
func ParseGetIncidentByIdResponse(rsp *http.Response) (*GetIncidentByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of change requests
	// (GET /api/v1/crq)
	ListCRQ(w http.ResponseWriter, r *http.Request, params ListCRQParams)
	// Create a single change request
	// (POST /api/v1/crq)
	CreateCRQ(w http.ResponseWriter, r *http.Request)
	// Retrieve a single change request by id
	// (GET /api/v1/crq/{crqId})
	GetCRQById(w http.ResponseWriter, r *http.Request, crqId CrqId)
	// Get list of incidents
	// (GET /api/v1/im)
	ListIncidents(w http.ResponseWriter, r *http.Request, params ListIncidentsParams)
	// Create a single incident
	// (POST /api/v1/im)
	CreateIncident(w http.ResponseWriter, r *http.Request)
	// Retrieve a single incident by id
	// (GET /api/v1/im/{incidentId})
	GetIncidentById(w http.ResponseWriter, r *http.Request, incidentId IncidentId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCRQ operation middleware
func (siw *ServerInterfaceWrapper) ListCRQ(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCRQParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCRQ(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCRQ operation middleware
func (siw *ServerInterfaceWrapper) CreateCRQ(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCRQ(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCRQById operation middleware
func (siw *ServerInterfaceWrapper) GetCRQById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "crqId" -------------
	var crqId CrqId

	err = runtime.BindStyledParameterWithLocation("simple", false, "crqId", runtime.ParamLocationPath, chi.URLParam(r, "crqId"), &crqId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "crqId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCRQById(w, r, crqId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListIncidents operation middleware
func (siw *ServerInterfaceWrapper) ListIncidents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncidentsParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIncidents(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateIncident operation middleware
func (siw *ServerInterfaceWrapper) CreateIncident(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateIncident(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIncidentById operation middleware
func (siw *ServerInterfaceWrapper) GetIncidentById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentId

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, chi.URLParam(r, "incidentId"), &incidentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "incidentId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIncidentById(w, r, incidentId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/crq", wrapper.ListCRQ)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/crq", wrapper.CreateCRQ)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/crq/{crqId}", wrapper.GetCRQById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/im", wrapper.ListIncidents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/im", wrapper.CreateIncident)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/im/{incidentId}", wrapper.GetIncidentById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"net/url"
)

// SetFake set fake values.
func (s *CreateCRQApplicationJSONBadRequest) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = CreateCRQApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *CreateCRQApplicationJSONInternalServerError) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = CreateCRQApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *CreateCRQReq) SetFake() {
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.IsAutoClose.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CreateCRQReqType) SetFake() {
	*s = CreateCRQReqTypeCrq
}

// SetFake set fake values.
func (s *CreateIncidentApplicationJSONBadRequest) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = CreateIncidentApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *CreateIncidentApplicationJSONInternalServerError) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = CreateIncidentApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *CreateIncidentReq) SetFake() {
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *Crq) SetFake() {
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.IsAutoClose = true
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CrqType) SetFake() {
	*s = CrqTypeCrq
}

// SetFake set fake values.
func (s *Error) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *ErrorCode) SetFake() {
	*s = ErrorCodeInvalid
}

// SetFake set fake values.
func (s *GetCRQByIdApplicationJSONInternalServerError) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = GetCRQByIdApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetCRQByIdApplicationJSONNotFound) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = GetCRQByIdApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetIncidentByIdApplicationJSONBadRequest) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = GetIncidentByIdApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetIncidentByIdApplicationJSONInternalServerError) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = GetIncidentByIdApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *ID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = ID(unwrapped)
}

// SetFake set fake values.
func (s *Incident) SetFake() {
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *LimitType) SetFake() {
	var unwrapped int
	{
		unwrapped = int(0)
	}
	*s = LimitType(unwrapped)
}

// SetFake set fake values.
func (s *Link) SetFake() {
	var unwrapped url.URL
	{
		unwrapped = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	*s = Link(unwrapped)
}

// SetFake set fake values.
func (s *Links) SetFake() {
	{
		{
			s.Self.SetFake()
		}
	}
	{
		{
			s.Base.SetFake()
		}
	}
	{
		{
			s.Next.SetFake()
		}
	}
	{
		{
			s.Prev.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ListCRQApplicationJSONBadRequest) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = ListCRQApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *ListCRQApplicationJSONInternalServerError) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = ListCRQApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *ListCrq) SetFake() {
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Limit.SetFake()
		}
	}
	{
		{
			s.Start.SetFake()
		}
	}
	{
		{
			s.Total = int(0)
		}
	}
	{
		{
			s.Data = nil
			for i := 0; i < 0; i++ {
				var elem Crq
				{
					elem.SetFake()
				}
				s.Data = append(s.Data, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ListIncidents) SetFake() {
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Limit.SetFake()
		}
	}
	{
		{
			s.Start.SetFake()
		}
	}
	{
		{
			s.Total = int(0)
		}
	}
	{
		{
			s.Data = nil
			for i := 0; i < 0; i++ {
				var elem Incident
				{
					elem.SetFake()
				}
				s.Data = append(s.Data, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ListIncidentsApplicationJSONBadRequest) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = ListIncidentsApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *ListIncidentsApplicationJSONInternalServerError) SetFake() {
	var unwrapped Error
	{
		unwrapped.SetFake()
	}
	*s = ListIncidentsApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *OptBool) SetFake() {
	var elem bool
	{
		elem = true
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCreateCRQReqType) SetFake() {
	var elem CreateCRQReqType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptLimitType) SetFake() {
	var elem LimitType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptLink) SetFake() {
	var elem Link
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStartType) SetFake() {
	var elem StartType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTimestamp) SetFake() {
	var elem Timestamp
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *SelfLink) SetFake() {
	{
		{
			s.Self.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *StartType) SetFake() {
	var unwrapped int
	{
		unwrapped = int(0)
	}
	*s = StartType(unwrapped)
}

// SetFake set fake values.
func (s *Timestamp) SetFake() {
	var unwrapped int64
	{
		unwrapped = int64(0)
	}
	*s = Timestamp(unwrapped)
}

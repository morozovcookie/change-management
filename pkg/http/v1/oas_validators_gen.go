// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CreateCRQApplicationJSONBadRequest) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *CreateCRQApplicationJSONInternalServerError) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *CreateCRQReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateCRQReqType) Validate() error {
	switch s {
	case "crq":
		return nil
	case "autocrq":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *CreateIncidentApplicationJSONBadRequest) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *CreateIncidentApplicationJSONInternalServerError) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *Crq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CrqType) Validate() error {
	switch s {
	case "crq":
		return nil
	case "autocrq":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *Error) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ErrorCode) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "not_found":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *GetCRQByIdApplicationJSONInternalServerError) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *GetCRQByIdApplicationJSONNotFound) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *GetIncidentByIdApplicationJSONBadRequest) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *GetIncidentByIdApplicationJSONInternalServerError) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s ID) Validate() error {
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    0,
		MaxLengthSet: false,
		Email:        false,
		Hostname:     false,
		Regex:        regexMap["^[0-9a-z]{32}$"],
	}).Validate(string(s)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}
func (s *Incident) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LimitType) Validate() error {
	if err := (validate.Int{
		MinSet:        true,
		Min:           1,
		MaxSet:        true,
		Max:           50,
		MinExclusive:  false,
		MaxExclusive:  false,
		MultipleOfSet: false,
		MultipleOf:    0,
	}).Validate(int64(s)); err != nil {
		return errors.Wrap(err, "int")
	}
	return nil
}
func (s *ListCRQApplicationJSONBadRequest) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *ListCRQApplicationJSONInternalServerError) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *ListCrq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Limit.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Start.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           1,
			MaxSet:        true,
			Max:           50,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Total)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total",
			Error: err,
		})
	}
	if err := func() error {
		if s.Data == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    50,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Data)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Data {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ListIncidents) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Limit.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Start.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           1,
			MaxSet:        true,
			Max:           50,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Total)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total",
			Error: err,
		})
	}
	if err := func() error {
		if s.Data == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    50,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Data)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Data {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ListIncidentsApplicationJSONBadRequest) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}
func (s *ListIncidentsApplicationJSONInternalServerError) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil
}

func (s StartType) Validate() error {
	if err := (validate.Int{
		MinSet:        true,
		Min:           0,
		MaxSet:        false,
		Max:           0,
		MinExclusive:  false,
		MaxExclusive:  false,
		MultipleOfSet: false,
		MultipleOf:    0,
	}).Validate(int64(s)); err != nil {
		return errors.Wrap(err, "int")
	}
	return nil
}

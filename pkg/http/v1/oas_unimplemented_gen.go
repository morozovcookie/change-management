// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// CreateCRQ implements createCRQ operation.
//
// To create a new change request you should send a POST request to
// `/api/v1/crq`.
// You should know that change request does not have any unique parameter in
// request that could be used to prevent creation twice.
// If you will send two requests with the same body than you will get two
// change requests with the different unique identifiers.
// As a result you will get relative URL to the created change request in the
// `Location` header with HTTP status code `201 Created`.
//
// POST /api/v1/crq
func (UnimplementedHandler) CreateCRQ(ctx context.Context, req *CreateCRQReq) (r CreateCRQRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateIncident implements createIncident operation.
//
// To create a new incident you should send a POST request to
// `/api/v1/im`.
// You should know that incident does not have any unique parameter in
// request that could be used to prevent creation twice.
// If you will send two requests with the same body than you will get two
// incidents with the different unique identifiers.
// As a result you will get relative URL to the created incident in the
// `Location` header with HTTP status code `201 Created`.
//
// POST /api/v1/im
func (UnimplementedHandler) CreateIncident(ctx context.Context, req *CreateIncidentReq) (r CreateIncidentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCRQById implements getCRQById operation.
//
// To retrieve information about specific change request, you should send a GET
// request to `/api/v1/crq/` with specified change request unique identifier.
//
// GET /api/v1/crq/{crqId}
func (UnimplementedHandler) GetCRQById(ctx context.Context, params GetCRQByIdParams) (r GetCRQByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIncidentById implements getIncidentById operation.
//
// To retrieve information about specific incident, you should send a GET
// request to `/api/v1/im/` with specified incident unique identifier.
//
// GET /api/v1/im/{incidentId}
func (UnimplementedHandler) GetIncidentById(ctx context.Context, params GetIncidentByIdParams) (r GetIncidentByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListCRQ implements listCRQ operation.
//
// To list all of the change requests, send a GET request to `/api/v1/crq`.
// The result will be a JSON object with a `data` key. This will be set to an
// array of change requests, each of which will contain the change request
// attributes.
//
// GET /api/v1/crq
func (UnimplementedHandler) ListCRQ(ctx context.Context, params ListCRQParams) (r ListCRQRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListIncidents implements listIncidents operation.
//
// To list all of the incidents, send a GET request to `/api/v1/im`.
// The result will be a JSON object with a `data` key. This will be set to an
// array of incidents, each of which will contain the incident attributes.
//
// GET /api/v1/im
func (UnimplementedHandler) ListIncidents(ctx context.Context, params ListIncidentsParams) (r ListIncidentsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateCRQ implements createCRQ operation.
	//
	// To create a new change request you should send a POST request to
	// `/api/v1/crq`.
	// You should know that change request does not have any unique parameter in
	// request that could be used to prevent creation twice.
	// If you will send two requests with the same body than you will get two
	// change requests with the different unique identifiers.
	// As a result you will get relative URL to the created change request in the
	// `Location` header with HTTP status code `201 Created`.
	//
	// POST /api/v1/crq
	CreateCRQ(ctx context.Context, req *CreateCRQReq) (CreateCRQRes, error)
	// CreateIncident implements createIncident operation.
	//
	// To create a new incident you should send a POST request to
	// `/api/v1/im`.
	// You should know that incident does not have any unique parameter in
	// request that could be used to prevent creation twice.
	// If you will send two requests with the same body than you will get two
	// incidents with the different unique identifiers.
	// As a result you will get relative URL to the created incident in the
	// `Location` header with HTTP status code `201 Created`.
	//
	// POST /api/v1/im
	CreateIncident(ctx context.Context, req *CreateIncidentReq) (CreateIncidentRes, error)
	// GetCRQById implements getCRQById operation.
	//
	// To retrieve information about specific change request, you should send a GET
	// request to `/api/v1/crq/` with specified change request unique identifier.
	//
	// GET /api/v1/crq/{crqId}
	GetCRQById(ctx context.Context, params GetCRQByIdParams) (GetCRQByIdRes, error)
	// GetIncidentById implements getIncidentById operation.
	//
	// To retrieve information about specific incident, you should send a GET
	// request to `/api/v1/im/` with specified incident unique identifier.
	//
	// GET /api/v1/im/{incidentId}
	GetIncidentById(ctx context.Context, params GetIncidentByIdParams) (GetIncidentByIdRes, error)
	// ListCRQ implements listCRQ operation.
	//
	// To list all of the change requests, send a GET request to `/api/v1/crq`.
	// The result will be a JSON object with a `data` key. This will be set to an
	// array of change requests, each of which will contain the change request
	// attributes.
	//
	// GET /api/v1/crq
	ListCRQ(ctx context.Context, params ListCRQParams) (ListCRQRes, error)
	// ListIncidents implements listIncidents operation.
	//
	// To list all of the incidents, send a GET request to `/api/v1/im`.
	// The result will be a JSON object with a `data` key. This will be set to an
	// array of incidents, each of which will contain the incident attributes.
	//
	// GET /api/v1/im
	ListIncidents(ctx context.Context, params ListIncidentsParams) (ListIncidentsRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
